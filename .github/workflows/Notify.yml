name: Notify all repo events

on:
  push:
    branches:
      - main
  issues:
    types: [opened, edited, deleted, transferred, pinned, unpinned, closed, reopened, assigned, unassigned, labeled, unlabeled, locked, unlocked]
  issue_comment:
    types: [created, edited, deleted]
  project:
    types: [created, updated, closed, reopened, deleted]
  project_card:
    types: [created, updated, moved, converted, deleted]
  project_column:
    types: [created, updated, moved, deleted]
  milestone:
    types: [created, closed, opened, edited, deleted]
  label:
    types: [created, edited, deleted]
  discussion:
    types: [created, edited, deleted, pinned, unpinned, locked, unlocked, transferred, answered]
  discussion_comment:
    types: [created, edited, deleted]
  workflow_dispatch:
  repository_dispatch:
    types: [push, issues]

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Fetch information from all repositories
        run: |
          # Set organization name
          org="SX-SMHD"
          
          # Initialize empty array to store repository names
          repos=()
          
          # Set initial page number for pagination
          page=1
          
          while true; do
            # Fetch repositories from GitHub API with pagination (100 per page)
            response=$(curl -s -H "Authorization: token ${{ secrets.TOKEN }}" \
                             -H "Accept: application/vnd.github.v3+json" \
                             "https://api.github.com/orgs/$org/repos?per_page=100&page=$page")
            
            # Print the response to debug and check for errors
            echo "API Response (Page $page): $response"
            
            # If the response is empty, exit the loop
            if [[ "$response" == "[]" ]]; then
              echo "No repositories found or error fetching repositories"
              break
            fi
            
            # Parse repository names and append to the repos array
            repos+=($(echo "$response" | jq -r '.[].name'))
            
            # Check if there are more pages to fetch
            if [[ $(echo "$response" | jq -r 'length') -lt 100 ]]; then
              break
            fi
            
            # Increment page number for next iteration
            page=$((page + 1))
          done

          # Save the list of repositories to a file
          echo "Repositories fetched: ${repos[@]}"
          echo "${repos[@]}" > repos.txt

      - name: Debug fetched repositories
        run: |
          echo "Fetched repositories from the organization:"
          cat repos.txt

      - name: Send notification to Teams
        run: |
          # Ensure that TEAMS_WEBHOOK_URL is set
          if [[ -z "${{ secrets.TEAMS_WEBHOOK_URL }}" ]]; then
            echo "Error: TEAMS_WEBHOOK_URL secret is not set."
            exit 1
          fi

          # Based on the event type, send appropriate notification to Teams
          if [[ "${{ github.event_name }}" == "push" ]]; then
            curl -H 'Content-Type: application/json' \
                 -d "{\"text\": \"GitHub Push event triggered: '${{ github.event_name }}' by '${{ github.actor }}' in repository '${{ github.repository }}'. Pushed to branch '${{ github.ref }}'.\"}" \
                 "${{ secrets.TEAMS_WEBHOOK_URL }}" -v
          elif [[ "${{ github.event_name }}" == "issues" ]]; then
            curl -H 'Content-Type: application/json' \
                 -d "{\"text\": \"GitHub Issue event triggered: '${{ github.event_name }}' by '${{ github.actor }}' in repository '${{ github.repository }}'. Issue #${{ github.event.issue.number }}: '${{ github.event.issue.title }}'.\"}" \
                 "${{ secrets.TEAMS_WEBHOOK_URL }}" -v
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            curl -H 'Content-Type: application/json' \
                 -d "{\"text\": \"GitHub Issue Comment event triggered: '${{ github.event_name }}' by '${{ github.actor }}' in repository '${{ github.repository }}'. Comment on Issue #${{ github.event.issue.number }}: '${{ github.event.comment.body }}'.\"}" \
                 "${{ secrets.TEAMS_WEBHOOK_URL }}" -v
          elif [[ "${{ github.event_name }}" == "project" ]]; then
            curl -H 'Content-Type: application/json' \
                 -d "{\"text\": \"GitHub Project event triggered: '${{ github.event_name }}' by '${{ github.actor }}' in repository '${{ github.repository }}'. Project '${{ github.event.project.name }}' was '${{ github.event.action }}'.\"}" \
                 "${{ secrets.TEAMS_WEBHOOK_URL }}" -v
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            curl -H 'Content-Type: application/json' \
                 -d "{\"text\": \"GitHub Workflow Dispatch event triggered by '${{ github.actor }}' in repository '${{ github.repository }}'. Workflow '${{ github.workflow }}' was manually triggered.\"}" \
                 "${{ secrets.TEAMS_WEBHOOK_URL }}" -v
          elif [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            curl -H 'Content-Type: application/json' \
                 -d "{\"text\": \"GitHub Repository Dispatch event triggered by '${{ github.actor }}' in repository '${{ github.repository }}'. Custom event '${{ github.event.action }}' received.\"}" \
                 "${{ secrets.TEAMS_WEBHOOK_URL }}" -v
          fi
