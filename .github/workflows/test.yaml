name: Create, Approve, and Auto-Merge Pull Request

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  create-approve-merge-pr:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Fetch full history to prevent conflicts

    - name: Prevent Re-Triggering After Auto-Merge
      run: |
        LAST_COMMITTER=$(git log -1 --pretty=format:'%an')
        if [[ "$LAST_COMMITTER" =~ ^(issuerepoapp bot|github-actions\[bot\])$ ]]; then
          echo "üö´ Last commit was made by a bot ($LAST_COMMITTER). Exiting..."
          exit 0
        fi

    - name: Configure Git
      run: |
        git config --global user.name 'issuerepoapp bot'
        git config --global user.email 'issuerepoapp-bot@users.noreply.github.com'

    - name: Check if Changes Are Needed
      run: |
        BRANCH_NAME="update-test-md"
        git fetch origin main
        git checkout main
        git pull origin main

        # Check if update-test-md exists and is ahead of main
        if git show-ref --verify --quiet refs/remotes/origin/$BRANCH_NAME; then
          git fetch origin $BRANCH_NAME
          git checkout $BRANCH_NAME
          git pull origin $BRANCH_NAME
          
          BEHIND_MAIN=$(git rev-list --count origin/main..HEAD)
          if [[ "$BEHIND_MAIN" -eq 0 ]]; then
            echo "‚úÖ update-test-md is already up to date with main. Exiting..."
            exit 0
          fi
        else
          git checkout -b $BRANCH_NAME
        fi

    - name: Update test.md (Only If Needed)
      run: |
        TIMESTAMP=$(date)
        echo "Last updated: $TIMESTAMP" > test.md  # Overwrite instead of appending

        git add test.md
        if git diff --cached --quiet; then
          echo "‚ö†Ô∏è No new changes to commit. Exiting..."
          exit 0
        else
          git commit -m "Update timestamp in test.md"
        fi

    - name: Push Changes
      run: |
        git push origin update-test-md --force-with-lease || (git pull --rebase origin update-test-md && git push origin update-test-md --force-with-lease)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Find Existing PR
      id: check-pr
      run: |
        sudo apt-get install -y jq
        PR_RESPONSE=$(curl -s -X GET \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls?state=open&head=${{ github.repository_owner }}:update-test-md")

        PR_NUMBER=$(echo "$PR_RESPONSE" | jq -r '.[0].number // empty')

        if [[ -n "$PR_NUMBER" ]]; then
          echo "‚úÖ Existing PR found: #$PR_NUMBER"
        else
          echo "üÜï Creating a new PR..."
          PR_CREATE_RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{
                  "title": "Update test.md timestamp",
                  "head": "update-test-md",
                  "base": "main",
                  "body": "This pull request updates the timestamp in test.md."
                }')

          PR_NUMBER=$(echo "$PR_CREATE_RESPONSE" | jq -r '.number // empty')

          if [[ -z "$PR_NUMBER" ]]; then
            echo "‚ùå Failed to create PR. Response: $PR_CREATE_RESPONSE"
            exit 1
          fi

          echo "‚úÖ Created PR: #$PR_NUMBER"
        fi

        echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

    - name: Approve Pull Request
      env:
        GH_PAT_APPROVER: ${{ secrets.GH_PAT_APPROVER }}
      run: |
        if [[ -z "$PR_NUMBER" ]]; then
          echo "‚ùå PR_NUMBER is empty. Cannot approve PR."
          exit 1
        fi

        RESPONSE=$(curl -s -X POST \
          -H "Authorization: token $GH_PAT_APPROVER" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews" \
          -d '{
                "event": "APPROVE",
                "body": "Auto-approved by GitHub Actions (via separate account)"
              }')

        echo "Approval Response: $RESPONSE"

    - name: Auto-Merge Pull Request
      run: |
        if [[ -z "$PR_NUMBER" ]]; then
          echo "‚ùå PR_NUMBER is empty. Cannot merge PR."
          exit 1
        fi

        MERGE_RESPONSE=$(curl -s -X PUT \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge" \
          -d '{
                "commit_title": "Auto-merged PR",
                "merge_method": "squash"
              }')

        echo "Merge Response: $MERGE_RESPONSE"
