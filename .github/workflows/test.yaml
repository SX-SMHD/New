name: Create, Approve, and Auto-Merge Pull Request

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  create-approve-merge-pr:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Generate GitHub App Token
      id: generate-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ secrets.ISSUEREPOAPP_APP_ID }}
        private-key: ${{ secrets.ISSUEREPOAPP_PRIVATE_KEY }}

    - name: Prevent Bot Loop
      run: |
        LAST_COMMITTER=$(git log -1 --pretty=format:'%an')
        if [[ "$LAST_COMMITTER" =~ ^(issuerepoapp bot|github-actions\[bot\])$ ]]; then
          echo "⚠️ Last commit was made by a bot ($LAST_COMMITTER). Exiting to prevent infinite loop."
          exit 0
        fi

    - name: Configure Git
      run: |
        git config --global user.name 'issuerepoapp bot'
        git config --global user.email 'issuerepoapp-bot@users.noreply.github.com'

    - name: Create or update branch
      run: |
        git checkout -b update-test-md || git checkout update-test-md
        echo "Hello" >> test.md
        git add test.md
        if git diff --cached --quiet; then
          echo "No new changes to commit."
        else
          git commit -m 'Append Hello to test.md file'
          git push origin update-test-md
        fi
      env:
        GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

    - name: Create or get PR number
      id: check-pr
      run: |
        sudo apt-get install -y jq
        PR_RESPONSE=$(curl -s -X GET \
          -H "Authorization: token ${{ steps.generate-token.outputs.token }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls?state=open&head=${{ github.repository_owner }}:update-test-md")

        PR_NUMBER=$(echo "$PR_RESPONSE" | jq -r '.[0].number // empty')

        if [[ -n "$PR_NUMBER" ]]; then
          echo "Existing PR found: #$PR_NUMBER"
        else
          echo "Creating a new PR..."
          PR_CREATE_RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ steps.generate-token.outputs.token }}" \
            https://api.github.com/repos/${{ github.repository }}/pulls \
            -d '{
                  "title": "Append Hello to test.md",
                  "head": "update-test-md",
                  "base": "main",
                  "body": "This pull request appends Hello to the test.md file."
                }')
          PR_NUMBER=$(echo "$PR_CREATE_RESPONSE" | jq -r '.number // empty')
          if [[ -z "$PR_NUMBER" ]]; then
            echo "❌ Failed to create PR. Response: $PR_CREATE_RESPONSE"
            exit 1
          fi
          echo "✅ Created PR: #$PR_NUMBER"
        fi
        echo "PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV

    - name: Approve Pull Request
      env:
        GH_PAT_APPROVER: ${{ secrets.GH_PAT_APPROVER }}
      run: |
        if [[ -z "$PR_NUMBER" ]]; then
          echo "❌ PR_NUMBER is empty. Cannot approve PR."
          exit 1
        fi
        RESPONSE=$(curl -s -X POST \
          -H "Authorization: token $GH_PAT_APPROVER" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews" \
          -d '{
                "event": "APPROVE",
                "body": "Auto-approved by GitHub Actions (via separate account)"
              }')
        echo "Approval Response: $RESPONSE"

    - name: Auto-Merge Pull Request
      run: |
        if [[ -z "$PR_NUMBER" ]]; then
          echo "❌ PR_NUMBER is empty. Cannot merge PR."
          exit 1
        fi
        MERGE_RESPONSE=$(curl -s -X PUT \
          -H "Authorization: token ${{ steps.generate-token.outputs.token }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER/merge" \
          -d '{
                "commit_title": "Auto-merged PR",
                "merge_method": "squash"
              }')
        echo "Merge Response: $MERGE_RESPONSE"
